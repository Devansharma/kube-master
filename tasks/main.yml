---
# tasks file for kube-master
- name: Installing docker
  package:
          name: docker
          state: present

- name: Start docker service
  service:
          name: docker
          state: started
          enabled: yes

- name: Kubernetes repo alternate
  copy:
          src: kubernetes.repo
          dest: /etc/yum.repos.d/kubernetes.repo


- name: Installing softwares
  yum:
          name: "{{ item }}"
          state: present
          disable_excludes: kubernetes
  loop:
          - kubectl
          - kubeadm
          - kubelet

- name: Start and enable kubelet services
  service:
          name: kubelet
          state: started
          enabled: yes

- name: pull config images
  command: "kubeadm config images pull"


- name: change docker configuration
  copy:
    src: daemon.json
    dest: /etc/docker/daemon.json


- name: restart docker
  service:
          name: docker
          state: restarted

- name: Install ip-route tc
  package:
          name: iproute-tc
          state: present

- name: make routing policy
  copy:
          src: k8s.conf
          dest: /etc/sysctl.d/k8s.conf

- name: enable system
  shell: "sysctl --system"

- name: start the master
  shell: "kubeadm init --pod-network-cidr={{ cidr }} --ignore-preflight-errors=NumCPU --ignore-preflight-errors=Mem"
  ignore_errors: True

- name: setup master as a client
  file:
          path: $HOME/.kube
          state: directory

- name: Setup master as a client
  shell: "cp -i /etc/kubernetes/admin.conf $HOME/.kube/config"
  ignore_errors: True

- name: Setup master as client
  shell: "chown $(id -u):$(id -g) $HOME/.kube/config"
  ignore_errors: True

- name: free some RAM caches
  shell: "echo 3 > /proc/sys/vm/drop_caches"

- name: apply CNI plugins
  shell: "kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml"
  ignore_errors: True

- name: delete existing pods
  shell: "kubectl delete pods -l app=flannel -n kube-system"

- name: Get join token
  command: "kubeadm token create --print-join-command"
  register: x
  ignore_errors: True

- name: "Storing tokens"
  local_action: copy content={{ x.stdout }} dest=/tmp/token

- name: join token
  debug:
          var: x

